version: '3.8'

services:
  auth:
    build:
      context: ./clientservice/auth
    container_name: auth
    ports:
      - "${PORT_AUTH}:5001"
    volumes:
      - ./clientservice/auth:/app
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    restart: unless-stopped

  chat:
    build:
      context: ./clientservice/chat
    container_name: chat
    ports:
      - "${PORT_CHAT}:5002"
    volumes:
      - ./clientservice/chat:/app
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    restart: unless-stopped

  worker:
    build:
      context: ./clientservice/worker
    container_name: worker
    ports:
      - "${PORT_WORKER}:8000"
      - "5059:8000"
    volumes:
      - ./clientservice/worker:/app
      - ./shared/schemas:/app/shared/schemas
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      crm:
        condition: service_started
    environment:
      - PYTHONPATH=/app:/app/shared
    env_file:
      - .env
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
      - KAFKA_CFG_CLUSTER_ID=V4XjsoY1QkOz9mmoDLjSRA
      - ALLOW_PLAINTEXT_LISTENER=yes
    env_file:
      - .env
    restart: unless-stopped

  crm:
    build:
      context: ./clientservice/crm
    container_name: crm
    ports:
      - "${PORT_CRM}:5000"
    volumes:
      - ./clientservice/crm:/app
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    restart: unless-stopped

  api_gateway:
    build:
      context: ./clientservice/api_gateway
    container_name: api_gateway
    ports:
      - "${PORT_GATEWAY}:8080"
      - "${PORT_GATEWAY_ALT}:8081"
    volumes:
      - ./clientservice/api_gateway:/app
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    restart: unless-stopped

  my_service:
    build:
      context: ./clientservice/my_service
    container_name: my_service
    ports:
      - "${PORT_MY_SERVICE}:5004"
    volumes:
      - ./clientservice/my_service:/app
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_started
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: postgres_db
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    restart: unless-stopped

volumes:
  postgres_data:
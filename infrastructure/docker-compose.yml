# infrastructure/docker-compose.yml
services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - crm_network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    env_file:
      - .env
    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CLUSTER_ID=V4XjsoY1QkOz9mmoDLjSRA
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "29092:9092"
    networks:
      - crm_network

  crm:
    build:
      context: ..   # корень репозитория (ClientServiceDocs)
      dockerfile: services/crm/Dockerfile
    container_name: crm
    env_file:
      - .env
    working_dir: /app
    command: python app/crm_mock.py
    ports:
      - "5054:5000"
    networks:
      - crm_network
    depends_on:
      - postgres
      - kafka

  worker:
    build:
      context: ..
      dockerfile: services/worker/Dockerfile
    container_name: worker
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CRM_API_URL=http://crm:5000
    working_dir: /app
    command: python app/main.py
    ports:
      - "5053:5050"
    networks:
      - crm_network
    depends_on:
      - postgres
      - kafka
      - crm

  producer:
    build:
      context: ..
      dockerfile: services/producer/Dockerfile
    container_name: producer
    env_file:
      - .env
    command: python producer.py
    networks:
      - crm_network
    depends_on:
      - kafka

networks:
  crm_network:
    driver: bridge

volumes:
  pg_data:
